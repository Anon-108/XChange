package org.knowm.xchange.binance;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import org.knowm.xchange.binance.dto.BinanceException;
import org.knowm.xchange.binance.dto.account.AssetDetail;
import org.knowm.xchange.binance.dto.account.AssetDividendResponse;
import org.knowm.xchange.binance.dto.account.BinanceAccountInformation;
import org.knowm.xchange.binance.dto.account.BinanceDeposit;
import org.knowm.xchange.binance.dto.account.BinanceWithdraw;
import org.knowm.xchange.binance.dto.account.DepositAddress;
import org.knowm.xchange.binance.dto.account.TransferHistory;
import org.knowm.xchange.binance.dto.account.TransferSubUserHistory;
import org.knowm.xchange.binance.dto.account.WithdrawResponse;
import org.knowm.xchange.binance.dto.trade.BinanceCancelledOrder;
import org.knowm.xchange.binance.dto.trade.BinanceDustLog;
import org.knowm.xchange.binance.dto.trade.BinanceListenKey;
import org.knowm.xchange.binance.dto.trade.BinanceNewOrder;
import org.knowm.xchange.binance.dto.trade.BinanceOrder;
import org.knowm.xchange.binance.dto.trade.BinanceTrade;
import org.knowm.xchange.binance.dto.trade.OrderSide;
import org.knowm.xchange.binance.dto.trade.OrderType;
import org.knowm.xchange.binance.dto.trade.TimeInForce;
import si.mazi.rescu.ParamsDigest;
import si.mazi.rescu.SynchronizedValueFactory;

/**
 * Binance认证
 */
@Path("")
@Produces(MediaType.APPLICATION_JSON)
public interface BinanceAuthenticated extends Binance {
  /**
   * 签名
   */
  String SIGNATURE = "signature";
  String X_MBX_APIKEY = "X-MBX-APIKEY";

  /**
   * Send in a new order
   * 发送新订单
   *
   * @param symbol 符号
   * @param side 一方/一侧
   * @param type 类型
   * @param timeInForce 生效时间
   * @param quantity 数量
   * @param quoteOrderQty optional 可选,订单数量报价
   * @param price optional, must be provided for limit orders only
   *              @param price 可选，仅限限价单必须提供

   * @param newClientOrderId optional, a unique id for the order. Automatically generated if not   sent.
   *                         * @param newClientOrderId 可选，订单的唯一 ID。 未发送则自动生成。
   *
   * @param stopPrice optional, used with stop orders
   *                  * @param stopPrice 可选，与止损单一起使用
   *
   * @param trailingDelta optional, used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and  TAKE_PROFIT_LIMIT orders
   *                      * @param trailingDelta 可选，与 STOP_LOSS、STOP_LOSS_LIMIT、TAKE_PROFIT 和 TAKE_PROFIT_LIMIT 订单一起使用
   *
   * @param icebergQty optional, used with iceberg orders
   *                   * @param icebergQty 可选，用于冰山订单
   *
   * @param newOrderRespType optional, MARKET and LIMIT order types default to FULL, all other  orders default to ACK
   *                         * @param newOrderRespType 可选，MARKET 和 LIMIT 订单类型默认为 FULL，所有其他订单默认为 ACK
   *
   * @param recvWindow optional 可选
   * @param timestamp 时间戳
   * @return
   * @throws IOException
   * @throws BinanceException
   * @see <a href="https://binance-docs.github.io/apidocs/spot/en/#new-order-trade">New order - Spot API docs  新订单 - Spot API 文档 -</a>
   */
  @POST
  @Path("api/v3/order")
  BinanceNewOrder newOrder(
      @FormParam("symbol") String symbol,
      @FormParam("side") OrderSide side,
      @FormParam("type") OrderType type,
      @FormParam("timeInForce") TimeInForce timeInForce,
      @FormParam("quantity") BigDecimal quantity,
      @FormParam("quoteOrderQty") BigDecimal quoteOrderQty,
      @FormParam("price") BigDecimal price,
      @FormParam("newClientOrderId") String newClientOrderId,
      @FormParam("stopPrice") BigDecimal stopPrice,
      @FormParam("trailingDelta") Long trailingDelta,
      @FormParam("icebergQty") BigDecimal icebergQty,
      @FormParam("newOrderRespType") BinanceNewOrder.NewOrderResponseType newOrderRespType,
      @FormParam("recvWindow") Long recvWindow,
      @FormParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * Test new order creation and signature/recvWindow long. Creates and validates a new order but does not send it into the matching engine.
   * * 测试新订单创建和签名/recvWindow long。 创建并验证新订单，但不将其发送到匹配引擎。
   *
   * @param symbol 符号
   * @param side 一侧/一方
   * @param type 类型
   * @param timeInForce 生效时间/有效时间
   * @param quantity 数量
   * @param quoteOrderQty optional 可选 订单数量报价
   * @param price 价格
   * @param newClientOrderId optional, a unique id for the order. Automatically generated by  default. 可选，订单的唯一 ID。 默认自动生成。
   * @param stopPrice optional, used with STOP orders
   *                  @param stopPrice 可选，与 STOP 订单一起使用
   *
   * @param trailingDelta optional, used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders
   *                      * @param trailingDelta 可选，与 STOP_LOSS、STOP_LOSS_LIMIT、TAKE_PROFIT 和 TAKE_PROFIT_LIMIT 订单一起使用
   *
   * @param icebergQty optional used with icebergOrders
   *                   * @param icebergQty 可选与 icebergOrders 一起使用
   *
   * @param recvWindow optional 可选,recv窗口
   * @param timestamp  时间戳
   * @return
   * @throws IOException
   * @throws BinanceException
   * @see <a href="https://binance-docs.github.io/apidocs/spot/en/#test-new-order-trade">Test new order - Spot API dsocs  测试新订单 - Spot API 文档-</a>
   */
  @POST
  @Path("api/v3/order/test")
  Object testNewOrder(
      @FormParam("symbol") String symbol,
      @FormParam("side") OrderSide side,
      @FormParam("type") OrderType type,
      @FormParam("timeInForce") TimeInForce timeInForce,
      @FormParam("quantity") BigDecimal quantity,
      @FormParam("quoteOrderQty") BigDecimal quoteOrderQty,
      @FormParam("price") BigDecimal price,
      @FormParam("newClientOrderId") String newClientOrderId,
      @FormParam("stopPrice") BigDecimal stopPrice,
      @FormParam("trailingDelta") Long trailingDelta,
      @FormParam("icebergQty") BigDecimal icebergQty,
      @FormParam("recvWindow") Long recvWindow,
      @FormParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * Check an order's status.<br>
   * * 检查订单状态。<br>
   *
   * Either orderId or origClientOrderId must be sent.
   * 必须发送 orderId 或 origClientOrderId。
   *
   * @param symbol 符号
   * @param orderId optional 可选,订单id
   * @param origClientOrderId optional 可选,起始客户订单id
   * @param recvWindow optional 可选,recv窗口
   * @param timestamp 时间戳
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @GET
  @Path("api/v3/order")
  BinanceOrder orderStatus(
      @QueryParam("symbol") String symbol,
      @QueryParam("orderId") long orderId,
      @QueryParam("origClientOrderId") String origClientOrderId,
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * Cancel an active order.
   * 取消有效订单。
   *
   * @param symbol 符号
   * @param orderId optional 可选,订单id
   * @param origClientOrderId optional 可选,起始客户订单id
   * @param newClientOrderId optional, used to uniquely identify this cancel. Automatically    generated by default.
   *                         * @param newClientOrderId 可选，用于唯一标识此次取消。 默认自动生成。
   *
   * @param recvWindow optional 可选,recv窗口
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @DELETE
  @Path("api/v3/order")
  BinanceCancelledOrder cancelOrder(
      @QueryParam("symbol") String symbol,
      @QueryParam("orderId") long orderId,
      @QueryParam("origClientOrderId") String origClientOrderId,
      @QueryParam("newClientOrderId") String newClientOrderId,
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * Cancels all active orders on a symbol. This includes OCO orders.
   * * 取消一个交易品种上的所有活动订单。 这包括 OCO 订单。
   *
   * @param symbol
   * @param recvWindow optional 可选,接收窗口
   * @param timestamp
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @DELETE
  @Path("api/v3/openOrders")
  List<BinanceCancelledOrder> cancelAllOpenOrders(
      @QueryParam("symbol") String symbol,
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * Get open orders on a symbol.
   * 获取交易品种的打开订单。
   *
   * @param symbol optional 可选,符号
   * @param recvWindow optional 可选,接收窗口
   * @param timestamp
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @GET
  @Path("api/v3/openOrders")
  List<BinanceOrder> openOrders(
      @QueryParam("symbol") String symbol,
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * Get all account orders; active, canceled, or filled. <br>
   * * 获取所有账户订单； 活动、取消或填充。 <br>
   *
   * If orderId is set, it will get orders >= that orderId. Otherwise most recent orders are returned.
   * * 如果设置了orderId，它将得到orders >= that orderId。 否则返回最近的订单。
   *
   * @param symbol 符号
   * @param orderId optional 可选,订单id
   * @param limit optional 可选,限制
   * @param recvWindow optional 可选,接收窗口
   * @param timestamp
   * @param apiKey
   * @param signature 签名
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @GET
  @Path("api/v3/allOrders")
  List<BinanceOrder> allOrders(
      @QueryParam("symbol") String symbol,
      @QueryParam("orderId") Long orderId,
      @QueryParam("limit") Integer limit,
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * Get current account information.
   * 获取当前帐户信息。
   *
   * @param recvWindow optional 可选,接收窗口
   * @param timestamp
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @GET
  @Path("api/v3/account")
  BinanceAccountInformation account(
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * Get trades for a specific account and symbol.
   * 获取特定账户和交易品种的交易。
   *
   * @param symbol 符号
   * @param orderId optional  订单id,可选
   * @param startTime optional 开始时间,可选
   * @param endTime optional 结束时间,可选
   * @param fromId optional, tradeId to fetch from. Default gets most recent trades.
   *               * @param fromId 可选，要从中获取的 tradeId。 默认获取最近的交易。
   *
   * @param limit optional, default 500; max 1000.
   *              *@param limit 可选，默认500;max 1000。
   * @param recvWindow optional 接收窗口,可选
   * @param timestamp
   * @param apiKey
   * @param signature 签名
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @GET
  @Path("api/v3/myTrades")
  List<BinanceTrade> myTrades(
      @QueryParam("symbol") String symbol,
      @QueryParam("orderId") Long orderId,
      @QueryParam("startTime") Long startTime,
      @QueryParam("endTime") Long endTime,
      @QueryParam("fromId") Long fromId,
      @QueryParam("limit") Integer limit,
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * 得到尘埃日志
   * Retrieves the dust log from Binance. If you have many currencies with low amount (=dust) that
    cannot be traded, because their amount is less than the minimum amount required for trading
    them, you can convert all these currencies at once into BNB with the button "Convert Small Balance to BNB".
   从 Binance 检索灰尘日志。 如果您有许多数量较少（=灰尘）的货币，
   不能交易，因为他们的金额低于交易所需的最低金额
   他们，您可以使用“将小额余额转换为 BNB”按钮将所有这些货币一次转换为 BNB。
   *
   * @param startTime optional. If set, also the endTime must be set. If neither time is set, the 100 most recent dust logs are returned.
   *                  * @param startTime 可选。 如果设置，还必须设置 endTime。 如果两个时间都没有设置，则返回最近的 100 条灰尘日志。

   * @param endTime optional. If set, also the startTime must be set. If neither time is set, the 100 most recent dust logs are returned.
   *                * @param endTime 可选。 如果设置，还必须设置开始时间。 如果两个时间都没有设置，则返回最近的 100 条灰尘日志。
   *
   * @param recvWindow optional 接收窗口,可选
   * @param timestamp mandatory 强制的 /强制性
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @GET
  @Path("/sapi/v1/asset/dribblet")
  BinanceDustLog getDustLog(
      @QueryParam("startTime") Long startTime,
      @QueryParam("endTime") Long endTime,
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * Submit a withdraw request.
   * 提交提款请求。
   *
   * @param coin 币
   * @param address 地址
   * @param addressTag optional for Ripple 瑞波币可选
   * @param amount 数量
   * @param name optional, description of the address
   *              可选，地址描述
   *
   * @param recvWindow optional 接收窗口,可选
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @POST
  @Path("/sapi/v1/capital/withdraw/apply")
  WithdrawResponse withdraw(
      @FormParam("coin") String coin,
      @FormParam("address") String address,
      @FormParam("addressTag") String addressTag,
      @FormParam("amount") BigDecimal amount,
      @FormParam("name") String name,
      @FormParam("recvWindow") Long recvWindow,
      @FormParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * Fetch deposit history.
   * 获取存款记录。
   *
   * @param coin optional 币,可选
   * @param startTime optional 开始时间,可选
   * @param endTime optional 结束时间,可选
   * @param recvWindow optional 接收窗口,可选
   * @param timestamp
   * @param apiKey
   * @param signature 签名
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @GET
  @Path("/sapi/v1/capital/deposit/hisrec")
  List<BinanceDeposit> depositHistory(
      @QueryParam("coin") String coin,
      @QueryParam("startTime") Long startTime,
      @QueryParam("endTime") Long endTime,
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * Fetch withdraw history.
   * 获取提取记录
   *
   * @param coin optional 币
   * @param startTime optional
   * @param endTime optional
   * @param recvWindow optional
   * @param timestamp
   * @param apiKey
   * @param signature 签名
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @GET
  @Path("/sapi/v1/capital/withdraw/history")
  List<BinanceWithdraw> withdrawHistory(
      @QueryParam("coin") String coin,
      @QueryParam("startTime") Long startTime,
      @QueryParam("endTime") Long endTime,
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * Fetch small amounts of assets exchanged BNB records.
   * 获取少量资产交换 BNB 记录。
   *
   * @param asset optional 资产
   * @param startTime optional
   * @param endTime optional
   * @param recvWindow optional
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @GET
  @Path("/sapi/v1/asset/assetDividend")
  AssetDividendResponse assetDividend(
      @QueryParam("asset") String asset,
      @QueryParam("startTime") Long startTime,
      @QueryParam("endTime") Long endTime,
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * 转移记录
   * @param fromEmail 发件人邮箱地址
   * @param startTime
   * @param endTime
   * @param page 页
   * @param limit
   * @param recvWindow
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @GET
  @Path("/sapi/v1/sub-account/sub/transfer/history")
  List<TransferHistory> transferHistory(
      @QueryParam("fromEmail") String fromEmail,
      @QueryParam("startTime") Long startTime,
      @QueryParam("endTime") Long endTime,
      @QueryParam("page") Integer page,
      @QueryParam("limit") Integer limit,
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * 子用户转移记录
   * @param asset 资产
   * @param type 类型
   * @param startTime
   * @param endTime
   * @param limit
   * @param recvWindow
   * @param timestamp
   * @param apiKey
   * @param signature 签名
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @GET
  @Path("/sapi/v1/sub-account/transfer/subUserHistory")
  List<TransferSubUserHistory> transferSubUserHistory(
      @QueryParam("asset") String asset,
      @QueryParam("type") Integer type,
      @QueryParam("startTime") Long startTime,
      @QueryParam("endTime") Long endTime,
      @QueryParam("limit") Integer limit,
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * 存款地址
   *
   * Fetch deposit address.
   * 获取存款地址。
   *
   * @param coin 币
   * @param recvWindow
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @GET
  @Path("/sapi/v1/capital/deposit/address")
  DepositAddress depositAddress(
      @QueryParam("coin") String coin,
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * 资产详情
   *
   * Fetch asset details.
   * 获取资产详情
   *
   * @param recvWindow
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  @GET
  @Path("/sapi/v1/asset/assetDetail")
  Map<String, AssetDetail> assetDetail(
      @QueryParam("recvWindow") Long recvWindow,
      @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
      @HeaderParam(X_MBX_APIKEY) String apiKey,
      @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, BinanceException;

  /**
   * 开始用户数据流
   *
   * Returns a listen key for websocket login.
   * 返回 websocket 登录的监听键。
   *
   * @param apiKey the api key
   * @return
   * @throws BinanceException
   * @throws IOException
   */
  @POST
  @Path("/api/v3/userDataStream")
  BinanceListenKey startUserDataStream(@HeaderParam(X_MBX_APIKEY) String apiKey)
      throws IOException, BinanceException;

  /**
   * 保持活动的用户数据流
   * Keeps the authenticated websocket session alive.
   * 使经过身份验证的 websocket 会话保持活动状态。
   *
   * @param apiKey the api key
   * @param listenKey the api secret  api的秘钥
   * @return
   * @throws BinanceException
   * @throws IOException
   */
  @PUT
  @Path("/api/v3/userDataStream?listenKey={listenKey}")
  Map<?, ?> keepAliveUserDataStream(
      @HeaderParam(X_MBX_APIKEY) String apiKey, @PathParam("listenKey") String listenKey)
      throws IOException, BinanceException;

  /**
   * 关闭用户数据流
   *
   * Closes the websocket authenticated connection.
   * 关闭 websocket 认证连接。
   *
   * @param apiKey the api key
   * @param listenKey the api secret api秘钥
   * @return
   * @throws BinanceException
   * @throws IOException
   */
  @DELETE
  @Path("/api/v3/userDataStream?listenKey={listenKey}")
  Map<?, ?> closeUserDataStream(
      @HeaderParam(X_MBX_APIKEY) String apiKey, @PathParam("listenKey") String listenKey)
      throws IOException, BinanceException;
}
